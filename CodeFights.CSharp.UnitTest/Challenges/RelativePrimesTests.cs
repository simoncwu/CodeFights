using Microsoft.VisualStudio.TestTools.UnitTesting;
using CodeFights.CSharp.Challenges;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CodeFights.CSharp.Challenges.Tests
{
    [TestClass()]
    public class RelativePrimesTests
    {
        [TestMethod()]
        public void relativePrimesTest()
        {
            var r = new RelativePrimes();
            var values = new[] { 143, 21, 2, 5, 14 };
            var expected = new[] { 143, 5 };
            Assert.IsTrue(expected.SequenceEqual(r.relativePrimes(values)));

            values = new[] { 2, 4 };
            expected = new int[0];
            Assert.IsTrue(expected.SequenceEqual(r.relativePrimes(values)));

            values = new[] { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 890, 892, 894, 896, 898, 900, 902, 904, 906, 908, 910, 912, 914, 916, 918, 920, 922, 924, 926, 928, 930, 932, 934, 936, 938, 940, 942, 944, 946, 948, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 997 };
            expected = new[] { 997 };
            Assert.IsTrue(expected.SequenceEqual(r.relativePrimes(values)));

            values = new[] { 3, 2 };
            expected = new[] { 3, 2 };
            Assert.IsTrue(expected.SequenceEqual(r.relativePrimes(values)));

            values = new[] { 135, 157, 440, 25, 600, 441, 833, 515, 740, 111, 948, 788, 219, 970, 409, 628, 779, 564, 795, 270, 356, 822, 446, 440, 699, 846, 662, 75, 388, 393, 52, 668, 108, 696, 383, 105, 123, 224, 172, 92, 571, 805 };
            expected = new[] { 409, 383, 571 };
            Assert.IsTrue(expected.SequenceEqual(r.relativePrimes(values)));

            values = new[] { 933, 550, 259, 472, 913, 145, 577, 578, 121, 187, 396, 921, 680, 458, 962, 613, 682, 635, 662, 563, 472, 613, 682, 737, 690, 215, 951, 16, 962, 815, 671, 601, 812, 542, 15, 525, 454, 188, 872, 52, 941, 471, 910, 587, 691, 553, 914, 213, 867, 36, 456, 861, 977, 906, 39, 707, 912, 392, 720, 808, 731, 812, 876, 198, 625, 255, 623, 740 };
            expected = new[] { 577, 563, 601, 941, 587, 691, 977 };
            Assert.IsTrue(expected.SequenceEqual(r.relativePrimes(values)));

            values = new[] { 515, 435, 411, 542, 784, 151, 90, 302, 387, 440, 220, 755, 927, 405, 983, 881, 928, 934, 273, 354, 455, 119, 723, 438, 645, 945, 207, 321, 337, 179, 422, 721, 925, 346, 637, 510, 242, 640, 294, 743, 997, 677, 574, 89, 722, 511, 497, 288, 182, 125, 342, 533, 619, 174, 382, 872, 751, 278, 647, 642, 697 };
            expected = new[] { 983, 881, 337, 179, 743, 997, 677, 89, 619, 751, 647 };
            Assert.IsTrue(expected.SequenceEqual(r.relativePrimes(values)));

            values = new[] { 163, 696, 291, 4, 450, 299, 115, 818, 133, 105, 142, 678, 426, 306, 438, 348, 725, 536, 132, 319, 981, 430, 685, 326, 951, 315, 101, 705, 822, 729, 358, 79, 481, 402, 844, 107, 223, 837, 764, 695, 961, 533, 966, 579, 690, 62, 385, 722, 908, 668, 848, 93, 896, 270, 878, 433, 352, 346, 645, 972, 209, 47, 843, 661, 113, 145, 517, 320, 512, 308, 872, 755, 391, 619, 173, 678, 563, 28, 898, 14, 668, 879, 497, 716, 269, 33, 82, 828, 871, 698, 954, 304, 806, 269, 200, 693, 381, 864, 208 };
            expected = new[] { 101, 79, 107, 223, 433, 661, 619, 563 };
            Assert.IsTrue(expected.SequenceEqual(r.relativePrimes(values)));

            values = new[] { 22, 446, 24, 365, 214, 356, 627, 539, 211, 667, 320, 605, 793, 848, 385, 762, 157, 347, 324, 658, 266, 212, 147, 278, 500, 10, 461, 372, 288, 642, 296, 922, 883, 817, 804, 27, 352, 119, 233, 134, 159, 245 };
            expected = new[] { 211, 667, 793, 157, 347, 883, 233 };
            Assert.IsTrue(expected.SequenceEqual(r.relativePrimes(values)));

            values = new[] { 747, 779, 433, 176, 133, 545, 272, 904, 714, 477, 587, 570, 252, 222, 698, 187, 520, 877, 286, 32, 798, 460, 895, 107, 157, 91, 762, 842, 21, 669, 944, 180, 674, 586, 917, 613, 938, 258, 299, 32, 239, 579, 433, 97, 297, 132, 696, 486, 452, 49, 977, 105 };
            expected = new[] { 587, 877, 107, 157, 613, 239, 97, 977 };
            Assert.IsTrue(expected.SequenceEqual(r.relativePrimes(values)));

            values = new[] { 2001, 3000, 4000, 1201, 8407 };
            expected = new[] { 1201, 8407 };
            Assert.IsTrue(expected.SequenceEqual(r.relativePrimes(values)));
        }
    }
}
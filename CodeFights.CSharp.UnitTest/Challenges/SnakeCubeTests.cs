using Microsoft.VisualStudio.TestTools.UnitTesting;
using CodeFights.CSharp.Challenges;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CodeFights.CSharp.UnitTest;

namespace CodeFights.CSharp.Challenges.Tests
{
    [TestClass]
    public class SnakeCubeTests
    {
        [TestMethod]
        public void snakeCubeTest()
        {
            var s = new SnakeCube();
            Func<string, char> parse = char.Parse;
            var board = @"[[ , , ,_,_,_, , , , , , ],
[ , , ,_,_,_, , , , , , ],
[ , , ,_,_,_, , , , , , ],
[_,_,_,_,_,_,_,_,_,_,_,_],
[_,_,*,*,>,_,o,_,_,_,_,_],
[_,_,_,_,_,_,_,_,_,_,_,_],
[ , , ,_,_,_, , , , , , ],
[ , , ,_,_,_, , , , , , ],
[ , , ,_,_,_, , , , , , ]]";
            var expected = "[[ , , ,_,_,_, , , , , , ],[ , , ,_,_,_, , , , , , ],[ , , ,_,_,_, , , , , , ],[_,_,_,_,_,_,_,_,_,_,_,_],[_,_,_,_,_,*,*,*,>,_,_,_],[_,_,_,_,_,_,_,_,_,_,_,_],[ , , ,_,_,_, , , , , , ],[ , , ,_,_,_, , , , , , ],[ , , ,_,_,_, , , , , , ]]";
            Assert.AreEqual(expected, Util.JaggedArrayToString(s.snakeCube(Util.ParseJaggedArray(board, parse), "FFFF")));

            board = @"[[ , , ,_,_,_, , , , , , ],
[ , , ,_,o,_, , , , , , ],
[ , , ,_,_,_, , , , , , ],
[_,_,_,_,_,_,_,_,_,_,_,_],
[_,_,*,*,>,_,o,_,_,_,_,_],
[_,_,_,_,_,_,_,_,_,_,_,_],
[ , , ,_,_,_, , , , , , ],
[ , , ,_,_,_, , , , , , ],
[ , , ,_,_,_, , , , , , ]]";
            expected = "[[ , , ,_,*,_, , , , , , ],[ , , ,_,*,_, , , , , , ],[ , , ,_,_,_, , , , , , ],[_,_,_,_,_,_,_,_,_,_,*,_],[_,_,_,_,_,_,o,_,_,_,v,_],[_,_,_,_,_,_,_,_,_,_,_,_],[ , , ,_,_,_, , , , , , ],[ , , ,_,_,_, , , , , , ],[ , , ,_,_,_, , , , , , ]]";
            Assert.AreEqual(expected, Util.JaggedArrayToString(s.snakeCube(Util.ParseJaggedArray(board, parse), "LFFFFFF")));

            board = @"[[ , , ,_,_,_, , , , , , ],
[ , , ,_,o,_, , , , , , ],
[ , , ,_,_,_, , , , , , ],
[_,_,_,_,_,_,_,_,_,_,_,_],
[_,_,*,*,>,_,o,_,_,_,_,*],
[_,_,*,_,_,_,_,_,_,_,_,*],
[ , , ,*,_,_, , , , , , ],
[ , , ,*,_,_, , , , , , ],
[ , , ,*,_,_, , , , , , ]]";
            expected = "[[ , , ,_,_,_, , , , , , ],[ , , ,_,o,_, , , , , , ],[ , , ,*,*,*, , , , , , ],[_,_,*,_,_,_,*,_,_,_,_,_],[_,_,*,_,_,_,*,_,_,_,_,_],[_,_,*,_,_,_,*,_,_,_,_,_],[ , , ,_,_,<, , , , , , ],[ , , ,_,_,_, , , , , , ],[ , , ,_,_,_, , , , , , ]]";
            Assert.AreEqual(expected, Util.JaggedArrayToString(s.snakeCube(Util.ParseJaggedArray(board, parse), "LRLFFRFFFFFFFFFFFFFFFFF")));

            board = @"[[ , , ,_,_,_, , , , , , ],
[ , , ,_,o,_, , , , , , ],
[ , , ,_,_,_, , , , , , ],
[_,_,_,_,_,_,_,_,_,_,_,_],
[<,_,_,_,_,_,o,_,_,_,_,_],
[*,_,_,_,_,_,_,_,_,_,_,_],
[ , , ,_,*,_, , , , , , ],
[ , , ,_,*,_, , , , , , ],
[ , , ,*,*,_, , , , , , ]]";
            expected = "[[ , , ,_,*,_, , , , , , ],[ , , ,_,*,*, , , , , , ],[ , , ,_,_,_, , , , , , ],[_,_,_,_,_,_,_,*,_,_,*,_],[_,_,_,_,_,_,o,*,_,_,v,_],[_,_,_,_,_,_,_,_,_,_,_,_],[ , , ,_,_,_, , , , , , ],[ , , ,_,_,_, , , , , , ],[ , , ,_,_,_, , , , , , ]]";
            Assert.AreEqual(expected, Util.JaggedArrayToString(s.snakeCube(Util.ParseJaggedArray(board, parse), "FRFFRFLFFRFFFFRFFFFFFFRFFFFFFFFFFFFRFFF")));

            board = @"[[ , , ,*,*,*, , , , , , ],
[ , , ,*,o,*, , , , , , ],
[ , , ,_,*,*, , , , , , ],
[_,*,_,_,*,_,_,_,_,_,_,_],
[<,_,_,_,*,_,o,_,_,_,_,_],
[*,_,_,_,*,_,_,_,_,_,_,_],
[ , , ,_,*,_, , , , , , ],
[ , , ,_,*,_, , , , , , ],
[ , , ,*,*,_, , , , , , ]]";
            expected = "[[ , , ,_,_,_, , , , , , ],[ , , ,_,o,_, , , , , , ],[ , , ,_,*,*, , , , , , ],[_,_,_,_,*,_,_,_,_,_,_,_],[*,_,_,_,*,<,*,*,*,*,*,*],[*,_,_,_,*,_,_,_,_,_,_,_],[ , , ,_,*,_, , , , , , ],[ , , ,_,*,_, , , , , , ],[ , , ,*,*,_, , , , , , ]]";
            Assert.AreEqual(expected, Util.JaggedArrayToString(s.snakeCube(Util.ParseJaggedArray(board, parse), "LLLFFFFFFF")));

            board = @"[[ , , ,*,*,*, , , , , , ],
[ , , ,*,o,*, , , , , , ],
[ , , ,_,*,*, , , , , , ],
[_,*,_,_,*,_,_,_,_,_,_,_],
[<,_,_,_,*,_,o,_,_,_,_,_],
[*,_,_,_,*,_,_,_,_,_,_,_],
[ , , ,_,*,_, , , , , , ],
[ , , ,_,*,_, , , , , , ],
[ , , ,*,*,_, , , , , , ]]";
            expected = "[[ , , ,_,_,_, , , , , , ],[ , , ,_,o,_, , , , , , ],[ , , ,_,x,x, , , , , , ],[_,_,_,_,x,_,_,_,_,_,_,_],[x,_,_,_,x,x,x,x,x,x,x,x],[x,_,_,_,x,_,_,_,_,_,_,_],[ , , ,_,x,_, , , , , , ],[ , , ,_,x,_, , , , , , ],[ , , ,x,x,_, , , , , , ]]";
            Assert.AreEqual(expected, Util.JaggedArrayToString(s.snakeCube(Util.ParseJaggedArray(board, parse), "FFFFFFFFF")));

            board = @"[[ , , , ,_,_,_,_, , , , , , , , ],
[ , , , ,*,*,*,*, , , , , , , , ],
[ , , , ,_,_,_,_, , , , , , , , ],
[ , , , ,_,_,_,_, , , , , , , , ],
[_,*,_,_,_,<,*,*,*,*,*,_,_,_,_,_],
[_,*,_,_,_,_,_,_,_,_,_,_,_,_,_,_],
[_,*,*,*,*,*,_,_,_,_,_,_,_,_,_,_],
[_,_,_,_,_,*,_,_,_,_,_,_,_,_,_,_],
[ , , , ,_,_,_,_, , , , , , , , ],
[ , , , ,_,_,_,_, , , , , , , , ],
[ , , , ,_,_,_,_, , , , , , , , ],
[ , , , ,_,_,_,_, , , , , , , , ]]";
            expected = "[[ , , , ,_,_,_,_, , , , , , , , ],[ , , , ,x,x,x,x, , , , , , , , ],[ , , , ,_,_,_,_, , , , , , , , ],[ , , , ,_,_,_,_, , , , , , , , ],[_,x,_,_,_,x,x,x,x,x,x,_,_,_,_,_],[_,x,_,_,_,x,_,_,_,_,_,_,_,_,_,_],[_,x,x,x,x,x,_,_,_,_,_,_,_,_,_,_],[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_],[ , , , ,_,_,_,_, , , , , , , , ],[ , , , ,_,_,_,_, , , , , , , , ],[ , , , ,_,_,_,_, , , , , , , , ],[ , , , ,_,_,_,_, , , , , , , , ]]";
            Assert.AreEqual(expected, Util.JaggedArrayToString(s.snakeCube(Util.ParseJaggedArray(board, parse), "LFFFRFFL")));

            board = @"[[ , , , ,_,_,_,_, , , , , , , , ],
[ , , , ,_,_,_,_, , , , , , , , ],
[ , , , ,_,_,_,_, , , , , , , , ],
[ , , , ,_,_,_,_, , , , , , , , ],
[_,o,_,_,_,_,_,_,_,_,o,_,_,_,_,_],
[_,_,_,_,_,_,_,_,_,_,_,_,_,*,^,_],
[*,*,*,*,*,*,*,*,*,*,_,*,*,*,_,_],
[*,_,_,_,_,_,_,_,_,o,_,*,_,_,_,_],
[ , , , ,_,_,_,_, , , , , , , , ],
[ , , , ,_,_,o,_, , , , , , , , ],
[ , , , ,_,_,_,_, , , , , , , , ],
[ , , , ,*,*,*,*, , , , , , , , ]]";
            expected = "[[ , , , ,_,_,_,_, , , , , , , , ],[ , , , ,_,_,_,_, , , , , , , , ],[ , , , ,_,_,_,_, , , , , , , , ],[ , , , ,_,_,_,_, , , , , , , , ],[_,o,_,_,_,_,_,_,_,_,*,*,*,*,*,_],[_,_,_,_,_,_,_,_,_,_,*,_,_,*,*,_],[*,_,_,_,_,_,_,_,_,_,*,*,*,*,_,_],[*,_,_,_,_,_,_,_,_,*,*,*,_,_,_,_],[ , , , ,_,_,^,_, , , , , , , , ],[ , , , ,_,_,*,*, , , , , , , , ],[ , , , ,_,_,_,_, , , , , , , , ],[ , , , ,*,*,*,*, , , , , , , , ]]";
            Assert.AreEqual(expected, Util.JaggedArrayToString(s.snakeCube(Util.ParseJaggedArray(board, parse), "FLFFFFLFFFRFLFFRF")));

            board = @"[[ , , , , , , , , , ,_,_,_,*,_,_,_,_,_,_, , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , ,_,_,_,*,_,_,_,_,_,_, , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , ,_,_,_,*,_,_,_,_,_,_, , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , ,_,_,_,*,*,*,*,*,*,_, , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , ,_,_,_,_,_,_,_,_,*,_, , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , ,_,_,_,_,_,_,_,_,*,_, , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , ,*,*,*,*,*,*,_,_,*,_, , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , ,_,_,_,_,_,*,_,_,*,o, , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , ,_,_,_,_,_,*,_,_,_,_, , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , ,_,_,_,_,_,*,*,*,*,*, , , , , , , , , , , , , , , , , , , , ],
[_,_,_,_,*,*,*,_,_,_,_,_,_,_,_,_,_,_,_,_,*,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,*,_,_,_],
[_,*,*,*,*,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,*,_,_,_,_,_,_,_,_,_,_,_,_,*,*,*,*,_,_,_],
[_,*,_,_,_,_,_,_,_,_,_,_,_,_,_,^,*,*,*,*,*,_,_,_,_,_,_,_,_,_,*,*,*,*,_,_,_,_,_,_],
[_,*,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,*,_,_,_,_,_,_,_,_,_],
[_,*,*,*,*,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,*,*,*,_,_,_,_,_,_,_],
[_,_,_,_,*,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,*,_,_,_,_,_,_,_],
[_,_,_,_,*,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,*,_,_,_,_,_,_,_],
[_,_,_,_,*,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,*,_,_,_,_,_,_,_],
[_,_,_,_,*,_,_,_,_,_,_,_,_,_,_,_,_,o,_,_,_,_,_,_,_,_,_,_,_,_,_,_,*,_,_,_,_,_,_,_],
[_,_,_,_,*,_,*,*,*,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,o,_,_,_,*,_,_,_,_,_,_,_],
[ , , , , , , , , , ,_,_,_,_,_,_,_,_,_,_, , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , ,*,*,*,*,*,*,_,_,_,_, , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , ,_,_,_,_,_,*,_,_,_,_, , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , ,*,*,*,*,_,*,*,_,_,o, , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , ,_,_,_,*,_,_,*,*,_,_, , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , ,*,*,_,*,*,*,_,*,_,_, , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , ,_,*,_,_,_,*,_,*,_,_, , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , ,_,*,_,_,_,*,_,*,_,_, , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , ,_,*,_,_,_,*,_,*,_,_, , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , ,_,*,*,*,*,*,_,*,_,_, , , , , , , , , , , , , , , , , , , , ]]";
            expected = "[[ , , , , , , , , , ,_,_,_,_,_,_,_,_,_,_, , , , , , , , , , , , , , , , , , , , ],[ , , , , , , , , , ,_,_,_,_,_,_,_,_,_,_, , , , , , , , , , , , , , , , , , , , ],[ , , , , , , , , , ,_,_,_,_,_,_,_,_,_,_, , , , , , , , , , , , , , , , , , , , ],[ , , , , , , , , , ,_,_,_,_,_,_,_,_,_,_, , , , , , , , , , , , , , , , , , , , ],[ , , , , , , , , , ,_,_,_,_,_,_,_,_,_,_, , , , , , , , , , , , , , , , , , , , ],[ , , , , , , , , , ,_,_,_,_,_,_,_,_,_,_, , , , , , , , , , , , , , , , , , , , ],[ , , , , , , , , , ,x,x,x,x,x,x,_,_,_,_, , , , , , , , , , , , , , , , , , , , ],[ , , , , , , , , , ,_,_,_,_,_,x,_,_,_,o, , , , , , , , , , , , , , , , , , , , ],[ , , , , , , , , , ,_,_,_,_,_,x,_,_,_,_, , , , , , , , , , , , , , , , , , , , ],[ , , , , , , , , , ,_,_,_,_,_,x,x,x,x,x, , , , , , , , , , , , , , , , , , , , ],[_,_,_,_,x,x,x,_,_,_,_,_,_,_,_,_,_,_,_,_,x,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_],[_,x,x,x,x,_,_,_,_,_,_,_,_,_,x,x,_,_,_,_,x,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_],[_,x,_,_,_,_,_,_,_,_,_,_,_,_,x,x,x,x,x,x,x,_,_,_,_,_,_,_,_,_,x,x,x,_,_,_,_,_,_,_],[_,x,_,_,_,_,_,_,_,_,_,_,_,_,x,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,x,_,_,_,_,_,_,_,_,_],[_,x,x,x,x,_,_,_,_,_,_,_,_,_,x,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,x,x,x,_,_,_,_,_,_,_],[_,_,_,_,x,_,_,_,_,_,_,_,_,_,x,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,x,_,_,_,_,_,_,_],[_,_,_,_,x,_,_,_,_,_,_,_,_,_,x,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,x,_,_,_,_,_,_,_],[_,_,_,_,x,_,_,_,_,_,_,_,_,_,x,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,x,_,_,_,_,_,_,_],[_,_,_,_,x,_,_,_,_,_,_,_,_,_,x,x,x,x,x,x,_,_,_,_,_,_,_,_,_,_,_,_,x,_,_,_,_,_,_,_],[_,_,_,_,x,_,x,x,x,_,_,_,_,_,_,_,_,_,_,x,_,_,_,_,_,_,_,_,o,_,_,_,x,_,_,_,_,_,_,_],[ , , , , , , , , , ,_,_,_,_,_,_,_,_,_,x, , , , , , , , , , , , , , , , , , , , ],[ , , , , , , , , , ,x,x,x,x,x,x,_,_,_,x, , , , , , , , , , , , , , , , , , , , ],[ , , , , , , , , , ,_,_,_,_,_,x,_,_,_,x, , , , , , , , , , , , , , , , , , , , ],[ , , , , , , , , , ,x,x,x,x,_,x,x,_,_,x, , , , , , , , , , , , , , , , , , , , ],[ , , , , , , , , , ,_,_,_,x,_,_,x,x,x,x, , , , , , , , , , , , , , , , , , , , ],[ , , , , , , , , , ,x,x,_,x,x,x,_,x,_,_, , , , , , , , , , , , , , , , , , , , ],[ , , , , , , , , , ,_,x,_,_,_,x,_,x,_,_, , , , , , , , , , , , , , , , , , , , ],[ , , , , , , , , , ,_,x,_,_,_,x,_,x,_,_, , , , , , , , , , , , , , , , , , , , ],[ , , , , , , , , , ,_,x,_,_,_,x,_,x,_,_, , , , , , , , , , , , , , , , , , , , ],[ , , , , , , , , , ,_,x,x,x,x,x,_,x,_,_, , , , , , , , , , , , , , , , , , , , ]]";
            Assert.AreEqual(expected, Util.JaggedArrayToString(s.snakeCube(Util.ParseJaggedArray(board, parse), "FLFLFFFFFFFLFFFFFRFFFFFFRFFFFFFFFFFFFF")));
        }
    }
}